@page "/register"
@using ArggonStores.Web.Models
@using ArggonStores.Web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Create Account - ArggonStores Admin</PageTitle>

<link href="~/css/login.css" rel="stylesheet" />
<link href="~/css/register.css" rel="stylesheet" />

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <div class="logo">
                <div class="logo-icon">AS</div>
            </div>
            <h1 class="register-title">Create Account</h1>
            <p class="register-subtitle">Join ArggonStores Admin Portal</p>
        </div>

        <div class="register-form">
            <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        <div class="alert-icon">âš </div>
                        <span>@errorMessage</span>
                    </div>
                }

                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText @bind-Value="registerModel.FirstName" class="form-input" id="firstName" placeholder="Enter your first name" />
                        <ValidationMessage For="@(() => registerModel.FirstName)" class="form-error" />
                    </div>

                    <div class="form-group">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText @bind-Value="registerModel.LastName" class="form-input" id="lastName" placeholder="Enter your last name" />
                        <ValidationMessage For="@(() => registerModel.LastName)" class="form-error" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <InputText @bind-Value="registerModel.Email" class="form-input" id="email" type="email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => registerModel.Email)" class="form-error" />
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <InputText @bind-Value="registerModel.Password" class="form-input" id="password" type="password" placeholder="Create a password" />
                    <ValidationMessage For="@(() => registerModel.Password)" class="form-error" />
                </div>

                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText @bind-Value="registerModel.ConfirmPassword" class="form-input" id="confirmPassword" type="password" placeholder="Confirm your password" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="form-error" />
                </div>

                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <div class="spinner"></div>
                        <span>Creating Account...</span>
                    }
                    else
                    {
                        <span>Create Account</span>
                    }
                </button>
            </EditForm>

            <div class="register-footer">
                <p>Already have an account? <a href="/login" class="link">Sign in here</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Redirect to dashboard if already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/dashboard");
        }
    }

    private async Task HandleRegister()
    {
        if (isLoading) return;

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAsync(registerModel);
            
            if (result.IsSuccess)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}